// Kyle Pena, 1/9/2016
// I should be studying right now



const float h = 0.01;
const float eps =  0.0001;
const float t = 0.5;
const float PI = 3.14159256;
const float SPEED_MULTIPLIER = 2.;


float dist(vec3 dZ, float time)
{
    float sphereRadius1 = 0.2;
	vec3 spherePos1 = vec3(0.0,0.0,0.0);
 	vec3 spherePos2 = vec3(0.,-0.5,  SPEED_MULTIPLIER * time);
    float sphereRadius2 = 0.05;
	vec3 spherePos3 = vec3(-0.5, SPEED_MULTIPLIER * time,0.);
    float sphereRadius3 = 0.03;    
  	float sphereDist1 = length(mod(dZ.xyz + spherePos1,1.0) - 0.5) - sphereRadius1;
  	float sphereDist2 = length(mod(dZ.xyz + spherePos2,1.0) - 0.5) - sphereRadius2;
  	float sphereDist3 = length(mod(dZ.xyz + spherePos3,1.0) - 0.5) - sphereRadius3;
  	return min(min(sphereDist1,sphereDist2),sphereDist3);
}

vec4 image(in vec2 fragCoord)
{
  float time = iTime + 7.;

  float focalLength = 1.2 + sin(SPEED_MULTIPLIER * (PI/10.) * time);
  vec3 res = 1.*iResolution ;
  vec2 position = ( fragCoord.xy / res.yy );	
  vec2 centered = (position - vec2(res.x / res.y / 2., 0.5));
  vec3 p = vec3(centered.x/focalLength,centered.y/focalLength,focalLength);
  vec3 eyeNorm = normalize(p);
  vec3 cameraPos = vec3(1.,1.+0.1*sin(SPEED_MULTIPLIER * (PI/3.)*time),time);
  p = p + cameraPos;
   
  // bg color
  vec4 fragColor = vec4(vec3(0.),1.);
  
  // dist raymarch
  for(int i = 0; i < 300; i++) {
    float d = dist(p,time);
    if (d < eps) {
	  vec3 surfaceNormal = normalize(vec3(
		dist(p - vec3(h, 0, 0),time) - dist(p + vec3(h, 0, 0),time),
		dist(p - vec3(0, h, 0),time) - dist(p + vec3(0, h, 0),time),
		dist(p - vec3(0, 0, h),time) - dist(p + vec3(0, 0, h),time)));
        float color = dot(eyeNorm,surfaceNormal);
      	fragColor = vec4(vec3(color),1.);
    	break;
    }
    p = p + d * eyeNorm;
  }
  
  fragColor = mix(fragColor,vec4(0.1,0.1,0.1,1.), smoothstep(0.,15.,length(p-cameraPos)));  
  
  return fragColor;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    vec4 tot = vec4(0.);
    for (int i = -1; i <= 1; i+=1) {
        for (int j = -1; j <= 1; j+=1) {
            tot += image(fragCoord + 0.25*vec2(float(i),float(j)));
        }
    }
    fragColor = (tot/9.);

}


