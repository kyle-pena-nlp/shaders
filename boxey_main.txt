// Main Image: 
// Reads from Buffer B for scene information
// Interprets scene info into materials, and materials to colors
// casts additional rays for shadows, AO, etc.


vec3 getEffect() {
    return texelFetch(iChannel2, MOUSE_WORLD_POS_ADDR, 0).xyz;
}


// read current angular displacement from buffer
vec3 getAngleDeviation()
{
    return texelFetch(iChannel2, ANGLE_DEVIATION_ADDR, 0).xyz;
}

vec3 getMouseWorldPos()
{
    return texelFetch(iChannel2, MOUSE_WORLD_POS_ADDR, 0).xyz;
}

float getPlaneLastClickedTime() {
    return texelFetch(iChannel2, PLANE_LAST_CLICKED_ADDR, 0).x;
}

vec3 Sky(in Params params, in vec3 uvw) {
    return clamp(SKY_BASE_COLOR + uvw.y*0.8, 0., 1.);
}


vec3 Rainbow(in Params params, in vec3 uvw) {
    float rainbowShift = sin(uvw.x + uvw.y);
    return HueShift(0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(41.-1.0) ), rainbowShift*(2.+sin(1.5*params.time))).xyz;
}

vec3 GraySlate(in Params, in vec3 uvw) {
    return vec3(0.5);
}


// Interpret the material and uvw and produce info for final rendering
// todo: make this less branchy
Material mat_col(in Params params, in QueryResult queryResult)
{
    
    float x = queryResult.uvw.x;
    float y = queryResult.uvw.y;
    float obj_id = queryResult.obj_id;
    
    vec3  nor  = vec3(0.);

    vec4 fractalInfo = mandelbrot(queryResult.uvw.xy, iTime); //texture(iChannel0, uvw.xy);

    // color
    vec3 sky          = Sky(params, queryResult.uvw);
    
    
    vec3 plane = 0.3 + 0.1*(mod( floor(5.0*x) + floor(5.0*y), 2.0))*vec3(1.0);
    
    
    
    
#if BOX_MAT == 1   
    vec3 box      = Rainbow(params, queryResult.uvw);
#endif
#if BOX_MAT == 2
    vec3 box = GraySlate(params, queryResult.uvw);
#endif
    
    vec3 fractal  =    fractalInfo.xyz;
   


    vec3 col = 
               step(-obj_id, -1. * -1.5) * step(obj_id, -0.5)  * sky          +   // -1 -->  -1.5  < x  < -0.5
               step(-obj_id, -1. *  0.5) * step(obj_id, 1.5)   * plane +   //  1 -->   0.5  < x  <  1.5
               step(-obj_id, -1. *  1.5) * step(obj_id, 2.5)   * fractal      +   //  2 -->   3.5  < x  <  4.5
               step(-obj_id, -1. *  2.5) * step(obj_id, 3.5)   * box;         //  3 -->   2.5  < x  <  3.5

    
    float spec = 1.;
    /*
                 step(-obj_id, -1. * -1.5) * step(obj_id, -0.5)  * skySpec          +   // -1 -->  -1.5  < x  < -0.5
                 step(-obj_id, -1. *  0.5) * step(obj_id, 1.5)   * planeSpec +   //  1 -->   0.5  < x  <  1.5
                 step(-obj_id, -1. *  1.5) * step(obj_id, 2.5)   * fractalSpec      +   //  2 -->   3.5  < x  <  4.5
                 step(-obj_id, -1. *  2.5) * step(obj_id, 3.5)   * boxSpec;   //  3 -->   2.5  < x  <  3.5
    
    */
    
    return Material(col, nor, spec); 
}








// ty to jjxtra at https://stackoverflow.com/questions/12751080/glsl-point-inside-box-test/37426532
vec2 inBox(vec2 v, vec2 bottomLeft, vec2 topRight) {
    vec2 s = step(bottomLeft, v) - step(topRight, v);
    return v * (s.x * s.y);   
}

float renderChar(vec3 uvw, Char char, float time) {
    vec2 scale   = vec2(1.)/char.dims;
    vec2 font_uv = inBox(scale * (uvw.xy - char.pos) + char.pos, vec2(0.), vec2(1.));
    vec2 font_coord = font_uv / vec2(16.) + char.char;
    vec4 sdf = texture(iChannel3, font_coord);
    
    
    float sdf_w = (sdf.w - 127. / 255.);
    
    float smoothed1 = smoothstep(-.09, 0.15, sdf_w);
    float smoothed2 = smoothstep(-.09, 0.11,  sdf_w);
    
    float mask = smoothed2 > 0.5 ? 0. : 1.;
    //return 1.-smoothed1;
    return max(mask, 1.- mix(smoothed1, smoothed2, sin(time)));
}

vec3 textSDF(vec3 uvw, float time)
{
    float mask = max( renderChar(uvw, b, time), max( renderChar(uvw, o, time), renderChar(uvw, x, time) ) );
    
    return vec3(mask);

}


// Render by fetching from the scene buffer and interpreting it to get diffuse
// TODO: Then, add in shadows, AO, etc.
vec3 render2(in vec2 fragCoord)
{

    Params params = Params( getEffect(), getAngleDeviation(), fragCoord, iResolution.xy, iTime, getPlaneLastClickedTime());
    Query query = getQuery(params);
    QueryResult scene = castRay( query, params, true, true );

    // Get the scene info from the scene buffer
    //vec4 scene = texelFetch(iChannel1, ivec2(fragCoord), 0);
    
    // alias some stuff from the scene buffer
    float d      = scene.d;
    float obj_id = scene.obj_id;
    vec3  uvw    = scene.uvw;
    
    // form query based on current camera position, combine with depth to get scene position
    vec3 rd = query.rd;
    vec3 ro = query.ro;
    vec3 pos = d * rd + ro;
    
    /*vec3 mouseWorldPos     = getMouseWorldPos();
    if (length(pos - mouseWorldPos) < 0.25)
    {
        return vec3(1.);
    }*/
    
    
    // material info
    Material mat = mat_col(params, scene);
    
    
    vec3 col = mat.col;

    // if not the sky, apply effects.
    if (obj_id > 0.)
    {
        vec3 nor = calcNormal( pos, params, true, true );
        vec3 ref = reflect( rd, nor ); // reflected ray

        // lighting        
        float occ = calcAO( pos, nor, params, true, true ); // ambient occlusion
		vec3  lig = normalize( SUNLIGHT_DIR ); // sunlight
		float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 ); // ambient light
        float dif = clamp( dot( nor, lig ), 0.0, 1.0 ); // diffuse reflection from sunlight
        // backlight
        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);
        float dom = smoothstep( -0.1, 0.1, ref.y ); // dome light
        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 ); // fresnel
		float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0); // specular reflection
        
        dif *= softshadow( pos, lig, 0.02, 2.5, params, true, true );
        dom *= softshadow( pos, ref, 0.02, 2.5, params, true, true );

		vec3 lin = vec3(0.0);
        lin += (1.30)*dif*vec3(1.00,0.80,0.55);
		lin += (2.00 + mat.spec)*spe*vec3(1.00,0.90,0.70)*dif;
        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;
        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;
        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;
        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;
		col = col*lin;
        
        // mix in fog?
        vec3 fog_col = SKY_BASE_COLOR;
    	col = mix( col, fog_col, 1.0-exp( -0.0002*d*d*d ) );
    }
    
    return vec3( clamp(col,0.0,1.0) );
}


#define ZERO (min(iFrame,0))

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

    vec3 tot = vec3(0.0);
#if AA>1
    for( int m=ZERO; m<AA; m++ )
    for( int n=ZERO; n<AA; n++ )
    {
        // pixel coordinates
        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
        //vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;
        vec3 col = render2(fragCoord + o);
#else    
        //vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;
        vec3 col = render2(fragCoord);
#endif

    
    
    tot += col;
    
#if AA>1
    }
    tot /= float(AA*AA);
#endif

    fragColor = vec4(tot, 1.);
}
